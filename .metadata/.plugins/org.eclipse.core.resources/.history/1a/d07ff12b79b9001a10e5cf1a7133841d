package com.ms.boot.ConvertCurrencyms.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.ms.boot.CurrencyConvertms.service.ConvertCurrencyProxy;
import com.ms.boot.CurrencyConvertms.service.CurrencyConvertService;
import com.ms.boot.ConvertCurrencyms.model.ConvertCurrencyDTO;
import com.ms.boot.CurrencyConvertms.repo.ConvertCurrencyRepository;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
 
public class ConvertCurrencyController {
	@Autowired  
	private ConvertCurrencyProxy proxy; 
	
	@GetMapping("/convertcurrency/countrycode/{countrycode}/amount/{amount}")   
	
	public ConvertCurrencyDTO convertCurrency(@PathVariable String countrycode,@PathVariable BigDecimal amount)  
	{  
	 
	Map<String,String>uriVariables=new HashMap<>();  
	uriVariables.put("countrycode", countrycode);  
	uriVariables.put("amount", amount.toString());  
 
	ResponseEntity<ConvertCurrencyDTO>responseEntity=new RestTemplate().getForEntity("http://localhost:8081//currencyconversion/countrycode/{countrycode}", ConvertCurrencyDTO.class, uriVariables);  
	ConvertCurrencyDTO response=responseEntity.getBody();  
  
	return new ConvertCurrencyDTO(countrycode,response.getConversionFactor(), amount,amount.multiply(response.getConversionFactor()));  
	}
	
	@GetMapping("/currency-converter-feign/from/{from}/to/{to}/quantity/{quantity}") //where {from} and {to} represents the column 
	//returns a bean 
	public ConvertCurrencyDTO convertCurrencyFeign(@PathVariable String countrycode, @PathVariable BigDecimal amount)
	{
		ConvertCurrencyDTO response=proxy.retrieveExchangeValue(countrycode);
	//creating a new response bean
	//getting the response back and taking it into Bean
	return new ConvertCurrencyDTO(countrycode,response.getConversionFactor(), amount, amount.multiply(response.getConversionFactor()));
	}
	}  
